tools:
  create-agent-server:
    info: |
      Creates and starts a multi-agent FastAPI server that hosts all your agents in one service.
      This tool both creates the server code AND automatically starts it running.

      Usage: Create the server once, then add multiple agents to it:
      - First: __polytope__run(module: create-agent-server) - creates and starts the server
      - Then: __polytope__run(module: agent-server-add-agent, args: {name: "your-agent"})

      The server runs with hot reload and includes WebSocket monitoring, test utilities, and API endpoints.
      Default path is "agent-server" - typically no need to change this.
    await: [scaffold-agent-service]
    params:
      - id: path
        info: Path relative to the project root where the service should be created.
        type: [default, str, agent-server]
    run:
      - id: scaffold-agent-service
        tool: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: agent-server}
              path: pt.param path
              add-to-tools: [{tool: default, call: api}]
            - template: https://github.com/opper-ai/opperai-agent-sdk.git
              path: lib/py/opper-agent-sdk
              print-files: []
              on-exists: skip
      - id: api
        after: {step: scaffold-agent-service}
        code: |-
          #pt-clj
          (-> (clojure.string/replace (:path params) #"[^A-Za-z0-9-]*$" "")
              (clojure.string/replace  #".*/" "")
              (pt/call-module {}))
      - id: scaffold-agent-dashboard
        tool: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: agent-management-ui}
              path: agent-dashboard
              on-conflict: skip
              add-to-tools: [{tool: default, call: agent-dashboard}]
      - id: agent-dashboard
        after: {step: scaffold-agent-dashboard}
        code: '#pt-clj (pt/call-module "agent-dashboard" {})'
  create-agent-dashboard:
    info: |
      Creates an agent management dashboard UI for monitoring and testing Opper agents.
      This React dashboard connects to agent APIs to provide real-time monitoring,
      agent testing, and execution event streaming via WebSocket.
      The project uses bun+shadcn+react-router v7 with agent-specific components.
    await: [scaffold-agent-dashboard]
    run:
      - id: scaffold-agent-dashboard
        tool: polytope/scaffold
        args:
          actions:
            - template: {type: repo, repo: "#pt-clj pt/module-repo-ref", path: agent-management-ui}
              path: agent-dashboard
              on-conflict: skip
              add-to-tools: [{tool: default, call: agent-dashboard}]
      - id: agent-dashboard
        after: {step: scaffold-agent-dashboard}
        code: '#pt-clj (pt/call-module "agent-dashboard" {})'

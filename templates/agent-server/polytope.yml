tools:
  {{ project-name }}:
    info: "FastAPI agent server (already running). Use this as base for other tools."
    params:
      - id: cmd
        info: The command to run
        type: [default, [either, str, [str]], ./bin/run]
      - id: dev-mode
        info: Whether to run in dev mode (with hot reload, debugging)
        type: [default, bool, true]
      - id: port
        info: The port the API will run on
        type: [default, int, 3030]
      - id: restart-policy
        info: Restart policy for the container.
        type: [default, [enum, always, on-failure, never], always]
      - id: id
        info: The container ID to use.
        type: [default, str, {{ project-name }}]
      - id: create
        info: Whether to create the container.
        type: [default, [enum, never, always, when-missing], when-missing]
    run:
      - tool: polytope/python
        args:
          id: pt.param id
          image: astral/uv:python3.13-bookworm-slim
          code: { type: repo, path: . }
          cmd: pt.param cmd
          restart:
            policy: pt.param restart-policy
          services: |-
            #pt-js
            params.cmd === "./bin/run"
              ? [{ id: "{{ project-name }}", ports: [{ protocol: "http", port: params.port, 'expose-as': params.port }] }]
              : null;
          env:
            - { name: HTTP_AUTORELOAD, value: pt.param dev-mode }
            - { name: HTTP_PORT, value: pt.param port }
            - { name: LOG_LEVEL, value: INFO }
            - { name: OPPER_API_KEY, value: pt.secret opper-api-key }
          mounts:
            - { path: /root/.cache/, source: { type: volume, scope: project, id: {{ project-name | kebab_case}}-dependency-cache } }
            - { path: /lib/py/opper-agent-sdk, source: { type: repo, path: /lib/py/opper-agent-sdk } }

  {{ project-name }}-add-dependencies:
    info: Adds one or more packages to the pyproject.toml file. Use this instead of manually editing pyproject.toml to ensure dependencies are installed correctly.
    params:
      - id: packages
        info: comma/whitespace-separated list of python packages to add to pyproject.toml
        type: str
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-add-dependencies
          restart-policy: never
          cmd: '#pt-js "./bin/uv-add " + params.packages.replace(/[\s,]+/g, " ")'
          create: always

  {{ project-name }}-test:
    info: Run unit tests for the agent server
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-test
          restart-policy: never
          cmd: ./bin/test
          create: always

  {{ project-name }}-call-agent:
    info: |
      Call an agent with inputs via the API.
      
      By default spawns a local in-memory server for testing.
      Set api=true to use the running server at localhost:8000.
      Set base-url to use a different server endpoint.
    params:
      - id: agent
        info: Name of the agent to call (e.g., 'research-assistant')
        type: str
      - id: inputs
        info: Input data for the agent as JSON (must match the agent's input schema)
        type: any
      - id: max-iterations
        info: Maximum reasoning iterations (1-100)
        type: [default, int, 3]
      - id: timeout
        info: Timeout in seconds
        type: [default, int, 60]
      - id: api
        info: Use external API instead of spawning local server
        type: [default, bool, false]
      - id: base-url
        info: API base URL (only with api=true)
        type: [default, str, "http://api:3030"]
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-call-agent
          restart-policy: never
          cmd: |
            #pt-js
            let cmd = ["./bin/uv-run", "test-agent", params.agent, JSON.stringify(params.inputs)];
            cmd.push("--max-iterations=" + params.maxIterations);
            cmd.push("--timeout=" + params.timeout);
            if (params.api) {
              cmd.push("--api=" + params.baseUrl);
            }
            cmd
          create: always

  {{ project-name }}-format:
    info: Format code with ruff
    run:
      - tool: {{ project-name }}
        args:
          restart-policy: never
          cmd: ./bin/format
          create: always

  {{ project-name }}-lint:
    info: Lint code with ruff
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-lint
          restart-policy: never
          cmd: ./bin/lint
          create: always

  {{ project-name }}-add-script:
    info: Scaffold a new Python script and add it to pyproject.toml. Run this to create test scripts for your agents!
    params:
      - id: script
        info: Script name (will create src/scripts/{script}.py and add to pyproject.toml)
        type: str
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-add-script
          restart-policy: never
          cmd: ./bin/add-script {pt.param script}
          create: always

  {{ project-name }}-add-agent:
    info: Create a new agent with scaffolding. Generates agent file with example tools and automatic registration.
    params:
      - id: name
        info: Agent name in kebab-case (e.g., 'research-assistant', 'code-analyzer')
        type: str
      - id: description
        info: Description of what the agent does
        type: [default, str, "An AI agent that helps with various tasks"]
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-add-agent
          restart-policy: never
          cmd: ./bin/add-agent {pt.param name} "{pt.param description}"
          create: always

  {{ project-name }}-run-script:
    info: Run a Python script defined in pyproject.toml
    params:
      - id: script
        info: Script name from pyproject.toml [project.scripts]
        type: str
      - id: args
        info: Optional arguments to pass to the script
        type: [default, str, ""]
    run:
      - tool: {{ project-name }}
        args:
          id: {{ project-name }}-run-script
          restart-policy: never
          cmd: ./bin/uv-run {pt.param script} {pt.param args}
          create: always
